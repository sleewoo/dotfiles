
\setenv PAGER 'pspg -b -X --no-commandbar --only-for-tables'

\echo '\nAdministrative queries:\n'

\echo '  :settings  -- Server settings'
\echo '  :conninfo  -- Server connections'
\echo '  :activity  -- Server activity'
\echo '  :locks     -- Lock info'
\echo '  :waits     -- Waiting queires'
\echo '  :dbsize    -- Database size'
\echo '  :tablesize -- Tables size'
\echo '  :uptime    -- Server uptime'
\echo '  :menu      -- Help Menu'

-- Administration queries

\set settings 'select name, setting,unit,context from pg_settings;'

\set conninfo 'select usename, count(*) from pg_stat_activity group by usename;'

\set activity 'select datname, pid, usename, application_name,client_addr, client_hostname, client_port, query, state from pg_stat_activity;'

\set locks  'SELECT bl.pid AS blocked_pid, a.usename AS blocked_user, kl.pid AS blocking_pid, ka.usename AS blocking_user, a.query AS blocked_statement FROM pg_catalog.pg_locks bl JOIN pg_catalog.pg_stat_activity a ON bl.pid = a.pid JOIN pg_catalog.pg_locks kl JOIN pg_catalog.pg_stat_activity ka ON kl.pid = ka.pid ON bl.transactionid = kl.transactionid AND bl.pid != kl.pid WHERE NOT bl.granted;'

\set waits 'WITH RECURSIVE l AS (   SELECT pid, locktype, mode, granted, ROW(locktype,database,relation,page,tuple,virtualxid,transactionid,classid,objid,objsubid) obj FROM pg_locks ), pairs AS (   SELECT w.pid waiter, l.pid locker, l.obj, l.mode FROM l w JOIN l ON l.obj IS NOT DISTINCT FROM w.obj AND l.locktype=w.locktype AND NOT l.pid=w.pid AND l.granted WHERE NOT w.granted ), tree AS (   SELECT l.locker pid, l.locker root, NULL::record obj, NULL AS mode, 0 lvl, locker::text path, array_agg(l.locker) OVER () all_pids FROM ( SELECT DISTINCT locker FROM pairs l WHERE NOT EXISTS (SELECT 1 FROM pairs WHERE waiter=l.locker) ) l UNION ALL SELECT w.waiter pid, tree.root, w.obj, w.mode, tree.lvl+1, tree.path||\'.\'||w.waiter, all_pids || array_agg(w.waiter) OVER ()   FROM tree JOIN pairs w ON tree.pid=w.locker AND NOT w.waiter = ANY ( all_pids ) ) SELECT (clock_timestamp() - a.xact_start)::interval(3) AS ts_age,        replace(a.state, \'idle in transaction\', \'idletx\') state,        (clock_timestamp() - state_change)::interval(3) AS change_age,        a.datname,tree.pid,a.usename,a.client_addr,lvl,        (SELECT count(*) FROM tree p WHERE p.path ~ (\'^\'||tree.path) AND NOT p.path=tree.path) blocked,        repeat(\' .\', lvl)||\' \'||left(regexp_replace(query, \'s+\', \' \', \'g\'),100) query FROM tree JOIN pg_stat_activity a USING (pid) ORDER BY path;'

\set dbsize 'SELECT datname, pg_size_pretty(pg_database_size(datname)) db_size FROM pg_database ORDER BY db_size;'

\set tablesize 'SELECT nspname || \'.\' || relname AS \"relation\", pg_size_pretty(pg_relation_size(C.oid)) AS "size" FROM pg_class C LEFT JOIN pg_namespace N ON (N.oid = C.relnamespace) WHERE nspname NOT IN (\'pg_catalog\', \'information_schema\') ORDER BY pg_relation_size(C.oid) DESC LIMIT 25;'

\set uptime 'select now() - pg_postmaster_start_time() AS uptime;'

\set menu '\\i ~/.psqlrc'

\echo

